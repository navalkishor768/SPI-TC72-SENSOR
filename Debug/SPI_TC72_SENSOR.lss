
SPI_TC72_SENSOR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000106  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000015a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000015a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000858  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000069d  00000000  00000000  00000a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000424  00000000  00000000  00001125  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f4  00000000  00000000  0000154c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003bf  00000000  00000000  00001640  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000024b  00000000  00000000  000019ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00001c4a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 5d 00 	call	0xba	; 0xba <main>
  64:	0c 94 81 00 	jmp	0x102	; 0x102 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <uart_init>:
	
	SPDR = dec_num;			// write decimal data
	while(!(SPSR & (1<<SPIF)));	// wait till transfer finish
	
	//sbi(PORTB,SS);
	PORTB |= (1<<SS);
  6c:	8a b1       	in	r24, 0x0a	; 10
  6e:	88 69       	ori	r24, 0x98	; 152
  70:	8a b9       	out	0x0a, r24	; 10
  72:	80 b5       	in	r24, 0x20	; 32
  74:	86 68       	ori	r24, 0x86	; 134
  76:	80 bd       	out	0x20, r24	; 32
  78:	87 e6       	ldi	r24, 0x67	; 103
  7a:	89 b9       	out	0x09, r24	; 9
  7c:	08 95       	ret

0000007e <uart_tx>:
  7e:	5d 9b       	sbis	0x0b, 5	; 11
  80:	fe cf       	rjmp	.-4      	; 0x7e <uart_tx>
  82:	8c b9       	out	0x0c, r24	; 12
  84:	08 95       	ret

00000086 <spi_init>:
  86:	80 eb       	ldi	r24, 0xB0	; 176
  88:	87 bb       	out	0x17, r24	; 23
  8a:	81 e5       	ldi	r24, 0x51	; 81
  8c:	8d b9       	out	0x0d, r24	; 13
  8e:	08 95       	ret

00000090 <spi_tx>:
}

void spi_tx(unsigned char data)
{
	//cbi(PORTB,SS);
	PORTB &= ~(1<<SS);
  90:	98 b3       	in	r25, 0x18	; 24
  92:	9f 7e       	andi	r25, 0xEF	; 239
  94:	98 bb       	out	0x18, r25	; 24

	SPDR = data;			// write decimal data
  96:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));	// wait till transfer finish
  98:	77 9b       	sbis	0x0e, 7	; 14
  9a:	fe cf       	rjmp	.-4      	; 0x98 <spi_tx+0x8>
	
	//sbi(PORTB,SS);
	PORTB |= (1<<SS);
  9c:	88 b3       	in	r24, 0x18	; 24
  9e:	80 61       	ori	r24, 0x10	; 16
  a0:	88 bb       	out	0x18, r24	; 24
  a2:	08 95       	ret

000000a4 <spi_read>:

unsigned char spi_read(unsigned char data)
{	
	unsigned char rawread;
	//cbi(PORTB,SS);
	PORTB &= ~(1<<SS);
  a4:	98 b3       	in	r25, 0x18	; 24
  a6:	9f 7e       	andi	r25, 0xEF	; 239
  a8:	98 bb       	out	0x18, r25	; 24
	SPDR = data;
  aa:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));	// wait till transfer finish
  ac:	77 9b       	sbis	0x0e, 7	; 14
  ae:	fe cf       	rjmp	.-4      	; 0xac <spi_read+0x8>
	rawread = SPDR;
  b0:	8f b1       	in	r24, 0x0f	; 15
	//sbi(PORTB,SS);
	PORTB |= (1<<SS);
  b2:	98 b3       	in	r25, 0x18	; 24
  b4:	90 61       	ori	r25, 0x10	; 16
  b6:	98 bb       	out	0x18, r25	; 24
	
	 return rawread;
}
  b8:	08 95       	ret

000000ba <main>:
{
	unsigned char count=0,tc72_raw[1];
	
	
	/* Replace with your application code */
	spi_init();
  ba:	0e 94 43 00 	call	0x86	; 0x86 <spi_init>
	
	uart_init();
  be:	0e 94 36 00 	call	0x6c	; 0x6c <uart_init>
	
	spi_tx(0x00);
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	0e 94 48 00 	call	0x90	; 0x90 <spi_tx>
	
	spi_tx(0x80);
  c8:	80 e8       	ldi	r24, 0x80	; 128
  ca:	0e 94 48 00 	call	0x90	; 0x90 <spi_tx>
	
	spi_tx(0x02);
  ce:	82 e0       	ldi	r24, 0x02	; 2
  d0:	0e 94 48 00 	call	0x90	; 0x90 <spi_tx>
	
	while (1)
	{
		//spi_tx(0x02);
		
		tc72_raw[0]=spi_read(0x02);
  d4:	82 e0       	ldi	r24, 0x02	; 2
  d6:	0e 94 52 00 	call	0xa4	; 0xa4 <spi_read>
  da:	c8 2f       	mov	r28, r24
		
		uart_tx('8');
  dc:	88 e3       	ldi	r24, 0x38	; 56
  de:	0e 94 3f 00 	call	0x7e	; 0x7e <uart_tx>
		uart_tx('\r');
  e2:	8d e0       	ldi	r24, 0x0D	; 13
  e4:	0e 94 3f 00 	call	0x7e	; 0x7e <uart_tx>
		
		uart_tx(tc72_raw[0]);
  e8:	8c 2f       	mov	r24, r28
  ea:	0e 94 3f 00 	call	0x7e	; 0x7e <uart_tx>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ee:	2f ef       	ldi	r18, 0xFF	; 255
  f0:	8d e3       	ldi	r24, 0x3D	; 61
  f2:	99 e4       	ldi	r25, 0x49	; 73
  f4:	21 50       	subi	r18, 0x01	; 1
  f6:	80 40       	sbci	r24, 0x00	; 0
  f8:	90 40       	sbci	r25, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <main+0x3a>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x44>
  fe:	00 00       	nop
 100:	e9 cf       	rjmp	.-46     	; 0xd4 <main+0x1a>

00000102 <_exit>:
 102:	f8 94       	cli

00000104 <__stop_program>:
 104:	ff cf       	rjmp	.-2      	; 0x104 <__stop_program>
